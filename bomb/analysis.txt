1.
set break point at :main,<phase_1>(col 37)
stepi to call<strings_not_equal>
which calls <string_length>,
<string_length> will return 0 if your input is null,also,
<string_not_equal> will return 1 if two strings are NOT equal, 
willreturn 0 if they are not equal,but the you first will run<string_length>,so you really 
can't creat a bug to get a 0 return in the end.
the 2nd <string_length> checks strings from %rsi,whose length is 0x34,
use print (char*) %rsi(curr),get your answer:
Border relations with Canada have never been better.
2.
<phase_2> stores 6 numbers in stack,%rsp=%rsp-0x28,each number needs 4bytes,
so 6 numbers costs 24bytes which is 3 frames,left 2 frames not
used(probably for align?),then it will call <read_six_numbers>,
it will put adress of number to:%rdx,%rcx,%r8,%r9,and then
<read_six_numbers> will allocate 24bytes(3frames),%rsp and %rsp+8(both are in curr fun frame) will store
the last 2 numbers,left one frame for align,
(later it calls sscanf to store 6 numbers to stack frame of <phase_2>),
ones <read_six_numbers> returns,<phase_2> will check if they are the right number,analyse it and you get:(stack decrease order)
32 16 8 4 2 1,consider args are store from top of stack,the answer is
1 2 4 8 16 32.
3.
jmpq   *0x402470(,%rax,8)->*(0x402470+8*%rax) //jumptable
(arg1,arg2)=(0<=x<=7,0x137),x>0=0 because input is transformed to a unsigned type, when x==1,get the right answer
4.
SAR arithmetic-10001010->11111000
SHR ->00001000
notice that in func4, the SAR %eax is short for SAR $1,%eax ,which has an opcode of 0xD1F8. when the immediate is not 1, aka SAR EAX,xx, the opcode is 0xC1F8 xx.
func4(x,0,e),0<=x<=0xe,
func4 is complicated,so we are going to run it and check the return value,
gcc -Og func4.c -o test (-Og is necessary)
run it,and we got 0,1,3,7
<phase_4> needs to input value (arg1,arg2),by analyse it we know that
arg1 must be 0 to 0xe,arg2 must be 0;
finally the answer will be:
(0,1,3,7)x(0)
5.
  40106a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  401071:	00 00 
  401073:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  ...
  4010d9:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  4010de:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  4010e5:	00 00 
  4010e7:	74 05                	je     4010ee <phase_5+0x8c>
  4010e9:	e8 42 fa ff ff       	callq  400b30 <__stack_chk_fail@plt>
  used to check stack overflow.

there is a string stored at 0x0x4024b0
your input&0xf decides which byte you will pick up,
you store your password at rsp+0x10,mov    %dl,0x10(%rsp,%rax,1),
each loop %eax will plus one,one means 1byte,once loop is done,
movb   $0x0,0x16(%rsp) will add '\0' to end string;
later the function will call <strings_not_equal> to check if it's same as the string at 0x40245e

"flyers"//password at 0x40245e
"maduiersnfotvbyl     So you think you can stop the bomb with ctrl-c, do you?"//you need to pick up password from it
9,15,14,5,6,7//offset
1001,1111,1110,0101,0110,0111
9,f,e,5,6,7
ascii://high 4 bits will be set to 0
IONEFG
6.
<phase_6> will check if your 6 input values are less than 7 and identical,
and then at 0x401153 to 0x40116d,
it stores *(*(*(0x6032d0+8)+8))+...) to rsp+0x20,rsp+0x28 and so on,
the depth depends on the value of argi,
for example, you input 1 2 3 4 5 6,
it will turn into *5,*4,*3,*2,*1,*0, *1==*(0x8+0x6032d0);
I've checked each value carfully,
*0==0x6032d0,*1==0x6032e0,*2=0x6032f0,*3=0x603300,*4=0x603310,*5=0x603320;
analyse it,we find that *(i+1)-*i=0x10;check the value stored at *i,
we get :*0==332,*1==168,*2==924,*3==691,*4==477,*5==443,
the function will check if your values stored at rsp+0x20 and so on are
in decreasing order,so the answer is unique:
*2,*3,*4,*5,*0,*1 -> 3,4,5,6,1,2 -> 4,3,2,1,6,5;
here is a diagram of the stack:(*argi==*(7-arg[i])-1))
*(rsp+48) -> *agr6,0
*(rsp+40) -> *agr5,rsp+48
*(rsp+38) -> *agr4,rsp+40
*(rsp+30) -> *agr3,rsp+38
*(rsp+28) -> *agr2,rsp+30
*(rsp+20) -> *agr1,rsp+28



